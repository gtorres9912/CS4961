###############################################################################
# OSK C Tutorial Screen
#
# Notes:
#   1. osk_c_demo serves as osk_c_tutor's COSMOS target
#
# License:
#   Written by David McComas, licensed under the copyleft GNU General 
#   Public License (GPL).
# 
################################################################################

require 'cosmos'
require 'osk_global'
require 'cfsat_const'
require 'osk_c_lesson_scr'

################################################################################
## GUI Commands
################################################################################

def osk_c_tutor_cmd(screen, cmd)
    
   case cmd 
   when "REF_TUTORIAL"
      tutor_file = File.join(CfSat::TUTOR_DOC_DIR,CfSat::APP_TUTOR_GUIDE_FILE)
      Osk::System.display_pdf(tutor_file)
   
   when "REF_VIDEO"
      prompt(Osk::MSG_TBD_FEATURE + "\n")   
      #Cosmos.open_in_web_browser(CfSat::APP_TUTOR_INTRO_YOUTUBE)
   
   when "REF_OSK_APP_DEV"
      osk_app_dev_file = File.join(Osk::OSK_DOCS_DIR,Osk::OSK_APP_DEV_FILE)
      Osk::System.display_pdf(osk_app_dev_file)
   
   when "TUTOR_START_RESUME"
      # Minimal error checking since the autogenerated screens can only be
      # generated if the directories,files, syntax are correct.

      lesson_id  = screen.get_named_widget("lesson").text
      
      lesson_base_dir  = File.join(Osk::fsw_app_dir(CfSat::TUTOR_APP_NAME),"lesson")
      lesson_dir       = File.join(lesson_base_dir,lesson_id.to_s)
      
      base_json_file = File.join(lesson_dir,CfSat::LESSON_JSON_BASE_FILE)
      user_json_file = File.join(lesson_dir,CfSat::LESSON_JSON_USER_FILE)
      
      if (File.exists?(user_json_file))
   
         lesson_json = File.read(user_json_file)
         lesson_info = JSON.parse(lesson_json)
      
      else
   
         lesson_json = File.read(base_json_file)
         lesson_info = JSON.parse(lesson_json)
         lesson_info["time-stamp"] = Osk::time_stamp
      
         File.open("#{user_json_file}","w") do |f| 
            f.write(JSON.pretty_generate(lesson_info))
         end

      end      
      
      osk_c_lesson_create_scr(lesson_id, lesson_info)
      display("CFSAT OSK_C_LESSON_SCR")
   
   when "TUTOR_RESTART"
      clear("CFSAT OSK_C_TUTOR_SCR")
      clear("CFSAT OSK_C_LESSON_SCR")
      osk_c_tutor_delete_user_files
      osk_c_tutor_start
      display("CFSAT OSK_C_TUTOR_SCR")
   else
      raise "Error in screen definition file. Undefined cmd '#{cmd}' sent to osk_c_tutor_cmd()"
   end
  
end # osk_c_tutor_cmd()


def osk_c_tutor_start

   #
   # If a user tutor session is in progress then use the file. Otherwise
   # create a new user tutor file and populate the osk_c_tutor/fsw/src
   # with empty source files that will be filled in during the lessons.
   # 
   if (File.exists?(CfSat::TUTOR_JSON_USER_PATH_FILE))
   
      user_state = "Resuming tutorial from"

      tutor_json = File.read(CfSat::TUTOR_JSON_USER_PATH_FILE)
      tutor_info = JSON.parse(tutor_json)
      
   else # First time tutor startup
   
     
      user_state = "Starting tutorial on"

      # Create user tutor JSON
      
      tutor_json = File.read(CfSat::TUTOR_JSON_BASE_PATH_FILE)
      tutor_info = JSON.parse(tutor_json)
      tutor_info["time-stamp"] = Osk::time_stamp
      
      File.open("#{CfSat::TUTOR_JSON_USER_PATH_FILE}","w") do |f| 
	      f.write(JSON.pretty_generate(tutor_info))
      end

      # Populate osk_c_tutor source files

      src_dir = File.join(CfSat::TUTOR_APP_DIR,'fsw','src')

      lesson_1_json_file = File.join(CfSat::TUTOR_APP_DIR,'lesson','1',CfSat::LESSON_JSON_BASE_FILE)            
      lesson_1_json = File.read(lesson_1_json_file)
      lesson_1_info = JSON.parse(lesson_1_json)

      src_files = lesson_1_info["src-file"]
      src_files.each do |src_file|
         src_pathfile = File.join(src_dir,src_file[0])
         File.open(src_pathfile,"w") do |f| 
	         f.write("/* Empty file to be populated during lessons */\n")
         end
      end 

   end 
   
   lesson_titles = []
   lesson_base_dir = File.join(Osk::fsw_app_dir(CfSat::TUTOR_APP_NAME),"lesson")
   
   (1..100).each do |lesson|

      lesson_dir = File.join(lesson_base_dir,(lesson).to_s)
      break unless Dir.exists?(lesson_dir)    
      
      begin
         lesson_json_file = File.join(lesson_dir,CfSat::LESSON_JSON_BASE_FILE)
         if (File.exists?(lesson_json_file))
            lesson_json = File.read(lesson_json_file)
            lesson_info = JSON.parse(lesson_json)
            lesson_titles << lesson_info["title"]
         else
            raise "Error in tutorial lesson #{lesson}. #{lesson_json_file} does not exist"    
         end
      rescue Exception => e
         puts e.message
         puts e.backtrace.inspect  
      end
   
   end # Lesson loop
   
   osk_c_tutor_create_scr(user_state, tutor_info, lesson_titles)
   
end # osk_c_tutor_start()


def osk_c_tutor_delete_user_files

   # Delete user tutor JSON file
   File.delete(CfSat::TUTOR_JSON_USER_PATH_FILE) if File.exist?(CfSat::TUTOR_JSON_USER_PATH_FILE)

   # Delete all user lesson JSON files
   (1..CfSat::TUTOR_LESSON_CNT).each do |lesson|
      
      lesson_dir = File.join(CfSat::TUTOR_LESSON_DIR,(lesson).to_s)
      break unless Dir.exists?(lesson_dir) 
      
      user_lesson_json_file = File.join(lesson_dir,CfSat::LESSON_JSON_USER_FILE)
      File.delete(user_lesson_json_file) if File.exist?(user_lesson_json_file)

   end # lesson loop

end # osk_c_tutor_delete_user_files()


def osk_c_tutor_read_user_json

   tutor_info = nil
   if (File.exists?(CfSat::TUTOR_JSON_USER_PATH_FILE))
      tutor_json = File.read(CfSat::TUTOR_JSON_USER_PATH_FILE)
      tutor_info = JSON.parse(tutor_json)
   end
   
   return tutor_info
   
end # osk_c_tutor_read_user_json


def osk_c_tutor_write_user_json(tutor_info)

   File.open("#{CfSat::TUTOR_JSON_USER_PATH_FILE}","w") do |f| 
      f.write(JSON.pretty_generate(tutor_info))
   end

end

################################################################################
## Create Tutor Screen
################################################################################

def osk_c_tutor_create_scr(user_state, tutor_info, lesson_titles)

   tutor_time_stamp = tutor_info["time-stamp"] # Had trouble with quotes in scr_header
   
   # Create a dropdown list for start/resume. ut in reverse order so the most
   # recent lesson is the default.
   num_lessons = tutor_info["lesson"].length
   lesson_list = ""
   tutor_info["lesson"].reverse.each_with_index do |lesson, idx|
      if (lesson["completed"] == true)
         lesson_list << "#{(num_lessons-idx).to_s} "
      end
   end
   lesson_array = lesson_list.split
   if (lesson_array.length == 0)
      lesson_list = "1"
   elsif (lesson_array.length < tutor_info["lesson"].length)
      lesson_list.prepend "#{(lesson_array.length+1).to_s} "
   end
   
   scr_header = "
   
   ###############################################################################
   # OSK C Tutorial Screen
   #
   # Notes:
   #   1. Do not edit this file because it is automatically generated and your
   #      changes will not be saved.
   #   2. File created by osk_c_tutor_scr.rb on #{Osk::time_stamp}
   #
   # License:
   #   Written by David McComas, licensed under the copyleft GNU General Public
   #   License (GPL). 
   #
   ###############################################################################
   <% 
      require 'osk_c_tutor_scr' 
   %>
   SCREEN AUTO AUTO 0.5
   GLOBAL_SETTING BUTTON BACKCOLOR 221 221 221
  
   TITLE \"OSK App Development Tutorial\"
     SETTING BACKCOLOR 162 181 205
     SETTING TEXTCOLOR black

   VERTICALBOX \"Overview\"
      LABEL \"<pre><b>1</b>  Develop an app using the OSK Application C Framework</pre>\"
      LABEL \"<pre><b>2</b>  Step-by-step guide from 'Hello World' to OSK_C_DEMO</pre>\"
      LABEL \"<pre><b>3</b>  #{user_state} #{tutor_time_stamp}</pre>\"
   END # Overview

   VERTICALBOX \"References\"

      MATRIXBYCOLUMNS 4
         BUTTON 'Tutorial Guide'    'osk_c_tutor_cmd(self,\"REF_TUTORIAL\")'
         BUTTON 'Tutorial Video'    'osk_c_tutor_cmd(self,\"REF_VIDEO\")'
         BUTTON 'OSK App Dev Guide' 'osk_c_tutor_cmd(self,\"REF_OSK_APP_DEV\")'
         LABEL  '        '
      END # Matrix

   END # References


   VERTICALBOX \"Tutorial\"

      MATRIXBYCOLUMNS 4 5 5
         BUTTON 'Start/Resume' 'osk_c_tutor_cmd(self,\"TUTOR_START_RESUME\")'
         NAMED_WIDGET lesson COMBOBOX #{lesson_list}
         BUTTON 'Restart'      'osk_c_tutor_cmd(self,\"TUTOR_RESTART\")'
         LABEL  '        '
      END

   END

   VERTICALBOX \"Lesson Completion Status\"

      MATRIXBYCOLUMNS 2 5 5
   
   "
   
   scr_trailer = "
      END # Matrix
   END # Completed
   "

   scr_file = Osk::cfg_target_dir_file("CFSAT","screens","#{CfSat::TUTOR_APP_NAME}_scr.txt")

   tutor_lesson = tutor_info["lesson"]
   
   begin
         
      # Always overwrite the temp file      
      File.open(scr_file,"w") do |f| 
           
         f.write (scr_header)

         scr_text = ""
         (0..lesson_titles.length-1).each do |lesson|

            lesson_info = tutor_lesson[lesson]
            checkbox = (lesson_info["completed"] == true)? "CHECKED" : "UNCHECKED"

            scr_text << "
               NAMED_WIDGET Lesson_#{lesson+1} CHECKBUTTON 'Lesson #{lesson+1} - #{lesson_titles[lesson]}' #{checkbox}
               LABEL '        '
            "
         end

         f.write (scr_text)
         
         f.write (scr_trailer)

      end # File
         
   rescue Exception => e
      puts e.message
      puts e.backtrace.inspect  
   end

end # osk_c_tutor_create_scr()

